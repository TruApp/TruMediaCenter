package @APP_PACKAGE@;

import android.os.Build.VERSION_CODES;
import android.os.Build;
import android.app.NativeActivity;
import android.content.ComponentName;
import android.content.Intent;
import android.media.AudioDeviceCallback;
import android.media.AudioDeviceInfo;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Choreographer;
import android.view.View;
import android.view.Surface;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.graphics.PixelFormat;
import android.os.Handler;
import @APP_PACKAGE@.XBMCVideoView;

public class Main extends NativeActivity implements Choreographer.FrameCallback
{
  private static final String TAG = "@APP_NAME@";

  private XBMCSettingsContentObserver mSettingsContentObserver;
  private XBMCVideoView mVideoView = null;
  private XBMCJsonRPC mJsonRPC = null;
  private RelativeLayout mVideoLayout = null;
  private View thisView = null;
  private Handler handler = new Handler();
  private Intent mNewIntent = null;
  private int mNewIntentDelay = 0;

  native void _onNewIntent(Intent intent);
  native void _onActivityResult(int requestCode, int resultCode, Intent resultData);
  native void _doFrame(long frameTimeNanos);
  native void _onAudioDeviceAdded(AudioDeviceInfo[] addedDevices);
  native void _onAudioDeviceRemoved(AudioDeviceInfo[] removedDevices);

  private class MyAudioDeviceCallback extends AudioDeviceCallback 
  {
    public void onAudioDevicesAdded(AudioDeviceInfo[] addedDevices) 
    {
      if (addedDevices.length != 0) 
        _onAudioDeviceAdded(addedDevices);
    }

    public void onAudioDevicesRemoved(AudioDeviceInfo[] removedDevices) 
    {
      if (removedDevices.length != 0) 
        _onAudioDeviceRemoved(removedDevices);
    }
  }

  private Runnable leanbackUpdateRunnable = new Runnable() 
  {
    @Override
    public void run() 
    {
      Log.d(TAG, "Updating recommendations");
      new Thread()
      {
        public void run()
        {
          mJsonRPC.updateLeanback(Main.this);
        }
      }.start();
      handler.postDelayed(this, 60*60*1000);
    }
  };
  
  public Main()
  {
    super();
  }

  public Surface getVideoViewSurface()
  {
    return mVideoView.getSurface();
  }

  public void setVideoViewSurfaceRect(final int left, final int top, final int right, final int bottom)
  {
    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        android.widget.RelativeLayout.LayoutParams mp = new android.widget.RelativeLayout.LayoutParams(mVideoView.getLayoutParams());
        mp.setMargins(left, top, mVideoLayout.getWidth() - right, mVideoLayout.getHeight() - bottom);
        mVideoView.setLayoutParams(mp);
        mVideoView.requestLayout();
      }
    });
  }

  public void clearVideoView()
  {
    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        mVideoView.clearSurface();
      }
    });
  }

  public void registerMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.registerMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void unregisterMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.unregisterMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void screenOn()
  {
    Window window = getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  }

  @Override
  public void onCreate(Bundle savedInstanceState)
  {
    // The dynamic linker on droid is a mess.
    // Depending on version, it might not be able to properly resolve
    try
    {
      // Surround with try-catch to allow static version (3.0)
      System.loadLibrary("smbclient");
    }
    catch (UnsatisfiedLinkError e) {}
    System.loadLibrary("@APP_NAME_LC@");

    super.onCreate(savedInstanceState);
    getWindow().setFormat(PixelFormat.TRANSPARENT);

    setContentView(R.layout.activity_main);
    mVideoView = (XBMCVideoView)findViewById(R.id.VideoView1);
    mVideoView.getHolder().setFormat(PixelFormat.TRANSPARENT);
    mVideoLayout = (RelativeLayout) findViewById(R.id.VideoLayout);

    setVolumeControlStream(AudioManager.STREAM_MUSIC);

    mSettingsContentObserver = new XBMCSettingsContentObserver(this, handler);
    getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      AudioManager audioManager = (AudioManager)getSystemService(AUDIO_SERVICE);
      audioManager.registerAudioDeviceCallback(new MyAudioDeviceCallback(), null);
    }
    mJsonRPC = new XBMCJsonRPC();

    // Delayed Intent
    if (getIntent().getData() != null)
    {
      mNewIntent = new Intent(getIntent());
      mNewIntentDelay = 5000;
      getIntent().setData(null);
    }

    thisView = getWindow().getDecorView();
    thisView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()
          {
            @Override
            public void onSystemUiVisibilityChange(int visibility)
            {
              if ((visibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0)
              {
                handler.post(new Runnable()
                {
                  public void run()
                  {
                    if (android.os.Build.VERSION.SDK_INT >= 19) {
                      // Immersive mode

                      // Constants from API > 17
                      final int API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 0x00001000;

                      thisView.setSystemUiVisibility(
                                View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                              | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                              | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                              | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                              | View.SYSTEM_UI_FLAG_FULLSCREEN
                              | API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
                    }
                  }
                });
              }
            }
          });
  }

  @Override
  protected void onNewIntent(Intent intent)
  {
    super.onNewIntent(intent);
    // Delay until after Resume
    mNewIntent = intent;
    mNewIntentDelay = 500;
  }

  @Override
  public void onStart()
  {
    super.onStart();
    getWindow().setFormat(PixelFormat.TRANSPARENT);

    Choreographer.getInstance().removeFrameCallback(this);
    Choreographer.getInstance().postFrameCallback(this);
  }

  @Override
  public void onResume()
  {
    super.onResume();

    Window window = getWindow();
    window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

    if (android.os.Build.VERSION.SDK_INT >= 19) {
      // Immersive mode

      // Constants from API > 17
      final int API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 0x00001000;

      thisView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_LAYOUT_STABLE
              | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
              | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
              | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
              | View.SYSTEM_UI_FLAG_FULLSCREEN
              | API_SYSTEM_UI_FLAG_IMMERSIVE_STICKY);


      if (getPackageManager().hasSystemFeature("android.software.leanback"))
      {
        // Leanback
        handler.removeCallbacks(leanbackUpdateRunnable);
        handler.postDelayed(leanbackUpdateRunnable, 10*1000);
      }
    }

    // New intent ?
    if (mNewIntent != null)
    {
      handler.postDelayed(new Runnable()
        {
          @Override
          public void run()
          {
            try {
              _onNewIntent(mNewIntent);
            } catch (UnsatisfiedLinkError e) {
              Log.e("Main", "Native not registered");
            } finally {
              mNewIntent = null;
            }
          }
        }, mNewIntentDelay);
    }
  }

  @Override
  public void onPause()
  {
    super.onPause();
  }

  @Override
  public void onActivityResult(int requestCode, int resultCode,
      Intent resultData)
  {
    _onActivityResult(requestCode, resultCode, resultData);
  }

  @Override
  public void onDestroy()
  {
    getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
    handler.removeCallbacks(leanbackUpdateRunnable);

    new Thread() {
      public void run()
      {
        try
        {
          sleep(5000);
          android.os.Process.killProcess(android.os.Process.myPid());
        } catch (Exception e) {}
      }
    }.start();
    super.onDestroy();
  }

  @Override
  public void doFrame(long frameTimeNanos)
  {
    Choreographer.getInstance().postFrameCallback(this);
    _doFrame(frameTimeNanos);
  }

  private native void _callNative(long funcAddr, long variantAddr);

  private void runNativeOnUiThread(final long funcAddr, final long variantAddr)
  {
    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        _callNative(funcAddr, variantAddr);
      }
    });
  }
}
